
- 정적 컨텐츠
- MVC와 템플릿 엔진
- API


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
정적 컨텐츠 : 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
서버에서 작업 없이 파일을 그대로 웹 브라우저로 내려주는것
Hello-spring/src/main/resources/static 에 hello-static.html파일을 만들고서
Localhost:8080/hello-static.html 을 브라우저에서 열면, 그대로 열람된다.
대신 어떤 프로그래밍을 할 수 없고, 그대로 내려주어야한다.
￼
브라우저로부터 uri를 수신받은 톰캣은 먼저 컨트롤러에 hello-static이 있는지 먼저 찾아보고, 없으면
Resources 내부에 hello-static.html이 있는지 확인한 뒤에 응답을 준다.



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
MVC와 템플릿 엔진 :
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
서버에서 템플릿 엔진(Jsp, php)을 프로그래밍을 해서 HTML파일을 동적으로 바꿔서 내려주는것 (렌더링하여 내려줌, 서버사이드 렌더링)
위 동작을 하기 위하여 MVC(모델, 뷰, 컨트롤러) 패턴으로 개발을 많이 한다.
￼
톰캣이 hello-mvc가 있는지 컨트롤러를 확인, 존재하므로 해당 메서드에 접근 후 결과값인 “hello-template” 을 응답받음.
ViewResolver가 뷰를 찾아주고 템플릿을 연결시켜줌. 
뷰 리졸버가 java return값인 “hello-template” 이라는 이름과 동일한 templates/hello-template.html 을 를 찾아서
Thymeleaf템플릿 엔진에서 처리해달라고 넘김
타임리프 엔진이 렌더링후 변환한 HTML을 웹브라우저에 반환. 




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
API : 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
요청에의해 데이터를 내려주는 방식. Json 포멧을 자주 이용한다
서버끼리 통신하기도 하고, 프론트와 통신하기도 한다.
￼
@ResponseBody 사용원리
톰캣이 hello-api와 매핑되는 메소드를 Controller에서 찾음
return hello; ( string name을 지닌 객체) 객체를 넘겨받으면
HttpMessageConverter 가 동작을 한다.
문자열이면 StringConverter / 객체면 JsonConverter 가 동작을 한다.
 * client HTTP header, server Controller 반환타입 정보 둘을 조합하여  httpMessageConverter가 선택된다.
xml (<html> </html>) 로도 받을 수 있음.


