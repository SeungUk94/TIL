개발한 뒤, 해당 소스가 정상적으로 동작하는 지 알아보려면 서비스를 직접 테스트해왔지만,
현재는 테스트 소스를 이용하여 실행하는 방법으로 간편해졌다.

프로젝트 설계 당시, 테스트코드를 먼저 작성하여 프로젝트의 테두리를 먼저 짜고, 그 뒤에 프로젝트를 구현하기도 한다. 이를 TDD방식이라고 한다.


Optional과 람다식
Optional은 NPE(Null Pointer Exception)를 방지하도록 도와주는 Optional<T> 형식의 Wrapper 클래스이다.
> Optional.ofNullable(~~)

//////////람다식 예시///////////
public class StreawmExample{
  public static void main(String[] args){
    List<String> names = Array.asList("Alice", "Bob", "Charlie", "David");

    List<String> filteredNames = names.stream()
      .filter(a -> a.startWith("C"))
      .collect(Collectors.toList());

    System.out.println(filteredNames);
  }
}
//스트림을 생성하고 
// a에 C로 시작하는 문자열을 필터링 
// 필터링 된 요소를 List로 수집  


//////////람다식 예시 2///////////
@test
public Optional<Member> findByName(String name){
  return store.values.stream()
    .filter(member -> member.getName().equals(name))
    .findAny();
  }

//store.values 를 stream화 하여
// member라는 임의의 변수에 넣고, memger.getName()이 name과 같은 경우에
// 첫번째로 같은 Optional로 감싸서 반환

